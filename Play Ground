#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
using vll = vector<ll>;
using vpl = vector<pair<ll,ll>>;
using vtl = vector<tuple<ll,ll,ll>>;

#define pb push_back
#define pf push_front
#define xrep(i,a,b) for(ll i = a; i < b; i++)
#define rep(i,a,b) for(ll i = a; i <= b; i++)
#define filla(a) for(auto& x : a) cin >> x
#define fillv(v,n) xrep(i,0,n){ll xv; cin >> xv; v.pb(xv);}
#define fills(s,n) xrep(i,0,n){ll xv; cin >> xv; s.insert(xv);}
#define all(x) x.begin(),x.end()


void solve(){
    ll n,x,y,maxy,count,ind,maxs;
    cin >> n;
    vpl p;
    maxy = 0;
    xrep(i,0,n){
        cin >> x >> y;
        p.pb({x,y});
        maxy = max(maxy,y);
    }
    sort(all(p));
    multiset<ll> msy;
    ind = 0;
    maxs = 0;
    xrep(i,0,maxy){
        if(i==p[ind].first){
            while(i==p[ind].first){
                msy.insert(p[ind].second);
                ind++;
            }
        }
        maxs = max(maxs, (ll)msy.size());
        if(msy.count(i)>0){
            msy.erase(i);
        }
    }
    cout << maxs;
    priority_queue <ll, vll, greater<ll>> pq;
    rep(i,1,maxs){
        pq.push(i);
    }
    xrep(i,0,n){
        
    }
    
}


int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);

    // ll t; 
    // cin >> t;
    // while(t--){
        solve();
    // }

    return 0;
}
